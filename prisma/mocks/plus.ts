import { Prisma } from "@prisma/client";
import plusStatusFactory from "../factories/plusStatus";
import plusSuggestionFactory from "../factories/plusSuggestion";
import plusVotingSummaryFactory from "../factories/plusVotingSummary";

// TODO: All this data is currently hard-coded so that Cypress tests will pass.
// In the future, we could allow the data generated by these factories be more random, and
// update the tests so that they are responsible for creating the specific data that they want to check.

export const getPlusStatusesData = (): Prisma.PlusStatusCreateManyInput[] => {
  return [
    {
      userId: 1,
      canVouchAgainAfter: new Date(Date.UTC(2020, 1, 1)),
    },
    {
      userId: 2,
    },
    {
      userId: 3,
    },
    {
      userId: 4,
    },
    {
      userId: 5,
    },
    {
      userId: 6,
      membershipTier: 2,
      vouchTier: 1,
    },
    {
      userId: 7,
      membershipTier: 2,
    },
    {
      userId: 8,
      membershipTier: 2,
    },
    {
      userId: 9,
      membershipTier: 2,
    },
    {
      userId: 10,
    },
    {
      userId: 11,
      membershipTier: 1,
      canVouchFor: 1,
    },
    {
      userId: 12,
      membershipTier: 2,
      canVouchAgainAfter: new Date(Date.UTC(2030, 1, 1)),
      canVouchFor: 2,
    },
  ].map((params) => {
    return plusStatusFactory.build(params);
  });
};

export const getPlusSuggestionsData = (): Prisma.PlusSuggestionCreateManyInput[] => {
  return [
    plusSuggestionFactory.build({
      description: "yooo so cracked",
      tier: 2,
      suggestedId: 10,
      suggesterId: 1,
    })
  ];
};

export const getPlusVotingSummaryData = (): Prisma.PlusVotingSummaryCreateManyInput[] => {
  return [
    {
      userId: 1,
      countsEU: [0, 0, 0, 3],
      countsNA: [0, 0, 2, 0],
    },
    {
      userId: 2,
      countsEU: [0, 3, 0, 0],
      countsNA: [2, 0, 0, 0],
    },
    {
      userId: 3,
      countsEU: [1, 1, 1, 0],
      countsNA: [0, 1, 1, 0],
    },
    {
      userId: 4,
      countsEU: [0, 1, 2, 0],
      countsNA: [2, 0, 0, 0],
    },
    {
      userId: 5,
      countsEU: [1, 0, 1, 1],
      countsNA: [0, 2, 0, 0],
    },
    {
      userId: 6,
      wasVouched: true,
      countsEU: [0, 3, 0, 0],
      countsNA: [2, 0, 0, 0],
    },
    {
      userId: 7,
      wasVouched: true,
      countsEU: [0, 0, 0, 3],
      countsNA: [0, 0, 2, 0],
    },
    // +2
    {
      userId: 6,
      tier: 2,
      countsEU: [0, 0, 2, 0],
      countsNA: [0, 0, 0, 2],
    },
    {
      userId: 7,
      tier: 2,
      countsEU: [0, 1, 0, 1],
      countsNA: [0, 1, 1, 0],
    },
    {
      userId: 8,
      tier: 2,
      countsEU: [0, 2, 0, 0],
      countsNA: [0, 0, 2, 0],
    },
    {
      userId: 9,
      tier: 2,
      countsEU: [1, 1, 0, 0],
      countsNA: [0, 2, 0, 0],
    },
    {
      userId: 10,
      tier: 2,
      countsEU: [0, 0, 2, 0],
      countsNA: [0, 0, 0, 2],
    },
  ].map((params) => {
    return plusVotingSummaryFactory.build(params);
  });
};
